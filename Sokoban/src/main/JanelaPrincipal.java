/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JanelaPrincipal.java
 *
 * Created on 2/Abr/2012, 14:48:58
 */
package main;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import sokoban.EstadoSokoban;

/**
 *
 * @author Leonardo Lino
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    private PuzzleTableModel puzzleTableModel;
    private JTable tabelaPuzzle = new JTable();
    private EstadoSokoban puzzle;
    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
	initComponents();
        painelPuzzle.add(tabelaPuzzle);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escolhaPuzzle = new javax.swing.JComboBox();
        painelPuzzle = new javax.swing.JPanel();
        botaoEscolherPuzzle = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        escolhaPuzzle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "soko001.txt", "soko002.txt", "soko003.txt", "soko004.txt" }));
        escolhaPuzzle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                escolhaPuzzleItemStateChanged(evt);
            }
        });
        escolhaPuzzle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaPuzzleActionPerformed(evt);
            }
        });

        botaoEscolherPuzzle.setText("Escolher puzzle");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(escolhaPuzzle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoEscolherPuzzle)
                .addContainerGap(591, Short.MAX_VALUE))
            .addComponent(painelPuzzle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(escolhaPuzzle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEscolherPuzzle))
                .addGap(39, 39, 39)
                .addComponent(painelPuzzle, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void escolhaPuzzleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_escolhaPuzzleItemStateChanged
	String escolha = (String) escolhaPuzzle.getSelectedItem();
        URL resource = getClass().getResource("src/puzzles/" + escolha);
        File file = new File(resource.getFile());
        try {
            setPuzzleInicial(lerFicheiroProblema(file));
        } catch (Exception ex) {
            Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_escolhaPuzzleItemStateChanged

    private void escolhaPuzzleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaPuzzleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_escolhaPuzzleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


	/*
	 * Set the Nimbus look and feel
	 */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
	 * If Nimbus (introduced in Java SE 6) is not available, stay with the
	 * default look and feel. For details see
	 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/*
	 * Create and display the form
	 */
	java.awt.EventQueue.invokeLater(new Runnable() {

	    public void run() {
		new JanelaPrincipal().setVisible(true);
	    }
	});
    }

    public static char[][] lerFicheiroProblema(File f) throws Exception {
	ArrayList<char[]> listaLinhas = new ArrayList<char[]>();
	BufferedReader br = new BufferedReader(new FileReader(f));

	String linha = br.readLine();
	while (linha != null) {
	    listaLinhas.add(linha.toCharArray());
	    linha = br.readLine();
	}

	return (char[][]) listaLinhas.toArray(new char[0][0]);
    }

    public static boolean eValido(char[][] tabela) {
	int numAgentes, numCaixotes, numObjetivos;
	numAgentes = numCaixotes = numObjetivos = 0;
	for (int i = 0; i < tabela.length; i++) {
	    if (tabela[i].length != tabela[0].length) {
		return false;
	    }
	    for (int j = 0; j < tabela[0].length; j++) {
		switch (tabela[i][j]) {
		    case 'P':
		    case 'V':
			break;
		    case 'O':
			numObjetivos++;
			break;
		    case 'C':
			numCaixotes++;
			break;
		    case 'X':
			numObjetivos++;
			numCaixotes++;
			break;
		    case 'A':
			numAgentes++;
			break;
		    default:
			return false;
		}
	    }
	}

	if (numAgentes != 1 || numCaixotes != numObjetivos || numCaixotes == 0) {
	    return false;
	}

	return true;
    }

    public void carregarProblema() {
	char[][] chars = null;
	File fich = null;
	JFileChooser jf = new JFileChooser();
	int resposta = jf.showOpenDialog(this);
	if (resposta == JFileChooser.APPROVE_OPTION) {
	    fich = jf.getSelectedFile();
	}

	try {
	    chars = lerFicheiroProblema(fich);
	} catch (Exception ex) {
	    System.out.println("Não foi possível ler o ficheiro: " + ex);
	}

	if (eValido(chars)) {
	    setPuzzleInicial(chars);
	} else {
	    JOptionPane.showMessageDialog(rootPane, "O ficheiro indicado não contém um problema de Sokoban válido.",
                    "Erro", JOptionPane.WARNING_MESSAGE);
	}
    }
    
    private void setPuzzleInicial(char[][] tabela){
        puzzle = new EstadoSokoban(tabela);
        puzzleTableModel = new PuzzleTableModel(puzzle);
        configurarTabela();
        
    }
    
    private void configurarTabela() {
        tabelaPuzzle.setModel(puzzleTableModel);
        tabelaPuzzle.setDefaultRenderer(Object.class, new PecaPuzzleCellRenderer());
        for (int i = 0; i < tabelaPuzzle.getColumnCount(); i++) {
            tabelaPuzzle.getColumnModel().getColumn(i).setPreferredWidth(Propriedades.CELL_WIDTH);
        }
        tabelaPuzzle.setRowHeight(Propriedades.CELL_HEIGHT);
        tabelaPuzzle.setBorder(BorderFactory.createLineBorder(Color.black));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoEscolherPuzzle;
    private javax.swing.JComboBox escolhaPuzzle;
    private javax.swing.JPanel painelPuzzle;
    // End of variables declaration//GEN-END:variables
}
